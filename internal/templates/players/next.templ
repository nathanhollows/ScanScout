package templates

import (
	"fmt"
	"github.com/nathanhollows/Rapua/models"
)

templ Next(team models.Team, locations []models.Location) {
	<div class="sm:mx-auto sm:w-full sm:max-w-sm">
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-compass w-16 h-16 m-auto"><path d="m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z"></path><circle cx="12" cy="12" r="10"></circle></svg>
		<h2
			class="mt-5 mb-3 text-center text-2xl font-bold leading-9 tracking-tight"
		>
			Next location
		</h2>
		switch team.Instance.Settings.NavigationMethod {
			case 0:
				@showMap(locations)
			case 1:
				@showMapAndNames(team, locations)
			case 2:
				@showNames(team, locations)
			case 3:
				@showClues(locations)
		}
		<div class="flex flex-row justify-center mt-12">
			<a href="/checkins" hx-boost="true" class="btn btn-ghost btn-outline">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin-check-inside"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><path d="m9 10 2 2 4-4"></path></svg>
				My Check-ins
			</a>
		</div>
		@footer(team)
	</div>
}

templ showMap(locations []models.Location) {
	<p class="text-center pb-5">
		You may choose any of the following locations. Use the map below to help
		find where you want to go.
	</p>
	<div
		id="map-next"
		class="w-full h-96 rounded-lg shadow-lg mt-5"
	></div>
	for _, location := range locations {
		<span class="location-name" data-lat={ fmt.Sprint(location.Marker.Lat) } data-lng={ fmt.Sprint(location.Marker.Lng) }></span>
	}
	@mapScript()
}

templ showMapAndNames(team models.Team, locations []models.Location) {
	<p class="text-center pb-5">
		You may choose any of the following locations. Use the map below to help find where you want to go.
	</p>
	for _, location := range locations {
		<p class="text-center pb-3">
			<em
				class="location-name"
				data-lat={ fmt.Sprint(location.Marker.Lat) }
				data-lng={ fmt.Sprint(location.Marker.Lng) }
			>{ location.Name }</em>
			<!-- Show the number of teams visiting this location -->
			if team.Instance.Settings.ShowTeamCount {
				<br/>
				<span class="badge badge-ghost">
					{ fmt.Sprint(location.CurrentCount) } Teams Visiting
				</span>
			}
		</p>
	}
	<div
		id="map-next"
		class="w-full h-96 rounded-lg shadow-lg mt-5"
	></div>
	@mapScript()
}

templ showNames(team models.Team, locations []models.Location) {
	<p class="text-center pb-5">
		You may choose any of the following locations. Use the map below to help
		find where you want to go.
	</p>
	for _, location := range locations {
		<p class="text-center pb-3">
			<em>{ location.Name }</em>
			<!-- Show the number of teams visiting this location -->
			if team.Instance.Settings.ShowTeamCount {
				<br/>
				<span class="badge badge-ghost">
					{ fmt.Sprint(location.CurrentCount) } Teams Visiting
				</span>
			}
		</p>
	}
}

templ showClues(locations []models.Location) {
	<p class="text-center pb-5">
		Solve a clue to find the next location. 
		<br/>
		Each clue is for a different location.
	</p>
	for _, location := range locations {
		if len(location.Clues) == 0 {
			<div>
				<div class="alert alert-secondary my-3">
					<span>
						<strong>Freebie!</strong> There are no clues for <em>{ location.Name }</em>
					</span>
				</div>
			</div>
		}
		for _, clue := range location.Clues {
			<div class="prose">
				<blockquote class="m-1">
					<p>{ clue.Content }</p>
				</blockquote>
			</div>
		}
	}
}

templ mapScript() {
	<script>
(function () {
  let map; // Store the map instance globally within the IIFE
  let markerArray = []; // Store the markers array globally within the IIFE

  function initializeMap() {
	const locations = document.querySelectorAll('.location-name');
	// Calculate the center and zoom level based on the locations
	let coords = [170.5111643, -45.8650509];
	let zoom = 17;
	for (let i = 0; i < locations.length; i++) {
		lat = parseFloat(locations[i].dataset.lat);
		lng = parseFloat(locations[i].dataset.lng);
		if (lat !== 0 && lng !== 0) {
			coords = [lng, lat];
			break;
		}
	}
	
    // Clear any existing markers
    markerArray.forEach(marker => marker.remove());
    markerArray = [];

    // Destroy existing map instance if it exists
    if (map) {
      map.remove();
      map = null; // Explicitly set to null to clear reference
    }

    // Set the Mapbox access token
    mapboxgl.accessToken = document.getElementById('mapbox_key').dataset.key;

    // Determine the style based on color scheme
    const style = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'mapbox://styles/nathanhollows/cl9w3nxff002m14sy9fco4vnr'
      : 'mapbox://styles/nathanhollows/clszboe2y005i01oid8ca37jm';

    // Create the map
    map = new mapboxgl.Map({
      container: 'map-next',
      style: style,
      center: coords,
      zoom: zoom,
	  cooperativeGestures: true,
    });

    // Find and loop through .location-name elements to create markers
    document.querySelectorAll('.location-name').forEach(function(location) {
      const marker = new mapboxgl.Marker()
        .setLngLat([location.dataset.lng, location.dataset.lat]);
      markerArray.push(marker);
    });

    // Sort markers by latitude
    markerArray.sort(function(a, b) {
      // If northern hemisphere, sort by descending latitude
      return a.getLngLat().lat < 0
        ? b.getLngLat().lat - a.getLngLat().lat
        : a.getLngLat().lat - b.getLngLat().lat;
    });

    // Add markers to the map
    markerArray.forEach(marker => marker.addTo(map));

    // Fit the map to the bounds of the markers
	if (markerArray.length > 1) {
		const bounds = new mapboxgl.LngLatBounds();
		markerArray.forEach(marker => {
		  bounds.extend(marker.getLngLat());
		});

		map.fitBounds(bounds, { padding: 50 });
	}
  }

  // Initialize the map on page load
  initializeMap();

})();
</script>
}
