package templates

import (
	"fmt"
	"github.com/nathanhollows/Rapua/internal/flash"
	internalModels "github.com/nathanhollows/Rapua/internal/models"
	"github.com/nathanhollows/Rapua/models"
	"github.com/uptrace/bun/schema"
	"sort"
)

templ ActivityTracker(instance internalModels.Instance) {
	<div class="flex flex-col sm:flex-row gap-3 justify-between items-center w-full p-5">
		<h1 class="text-2xl font-bold">
			Activity tracker
			switch instance.GetStatus() {
				case internalModels.Active:
					<span class="badge badge-success">
						{ instance.GetStatus().String() }
					</span>
				case internalModels.Scheduled:
					<span class="badge badge-warning">
						{ instance.GetStatus().String() }
					</span>
				case internalModels.Closed:
					<span class="badge badge-outline">
						Inactive
					</span>
			}
		</h1>
		<div class="flex gap-3">
			@GameScheduleStatus(instance)
			<button class="btn btn-secondary" onclick="announcement_modal.showModal()">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-megaphone"><path d="m3 11 18-5v12L3 14v-3z"></path><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"></path></svg>
				Announce
			</button>
		</div>
	</div>
	<div class="relative flex flex-col md:flex-row px-5 md:space-x-5">
		<div class="w-full md:w-5/12">
			<div id="map-container" class="relative w-full aspect-square lg:w-96 rounded-lg shadow-lg my-5 overflow-hidden">
				<div id="map-activity" class="map w-full h-full rounded-lg"></div>
			</div>
			<div class="join join-vertical w-full">
				if len(instance.Locations) == 0 {
					<div role="alert" class="alert">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							class="stroke-info h-6 w-6 shrink-0"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
							></path>
						</svg>
						<span>No locations available</span>
						<div>
							<a href="/admin/locations/new" class="btn btn-sm btn-secondary">Add a location</a>
						</div>
					</div>
				}
				if len(instance.Locations) > 0 {
					for i, location := range instance.Locations {
						<div
							class="flex flex-row justify-between items-center space-x-3 bg-base-200 hover:bg-base-300 border-base-300 rounded-lg p-4 join-item"
						>
							<div class="flex flex-row items-center space-x-3 grow">
								<strong>{ intToString(i + 1) }</strong>
								<a
									href={ templ.URL(fmt.Sprintf("/admin/locations/%s", location.Marker.Code)) }
									hx-boost="true"
									class="link flex-grow location-name"
									data-lat={ fmt.Sprint(location.Marker.Lat) }
									data-lng={ fmt.Sprint(location.Marker.Lng) }
								>{ location.Marker.Name }</a>
								<span
									if location.TotalVisits - location.CurrentCount > 0 {
										class="tooltip flex space-x-2 tooltip-left text-sm md:tooltip-top"
									} else {
										class="tooltip flex space-x-2 tooltip-left text-sm md:tooltip-top opacity-50"
									}
									data-tip="Completed check-ins"
								>
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin-check-inside w-5 h-5"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><path d="m9 10 2 2 4-4"></path></svg>
									<strong>{ fmt.Sprint(location.TotalVisits - location.CurrentCount) }</strong>
								</span>
								if instance.Settings.CompletionMethod == internalModels.CheckInAndOut {
									<span
										if location.CurrentCount > 0 {
											class="tooltip flex space-x-2 tooltip-left text-sm md:tooltip-top"
										} else {
											class="tooltip flex space-x-2 tooltip-left text-sm md:tooltip-top opacity-50"
										}
										data-tip="Current check-ins"
									>
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin w-5 h-5"><path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path><circle cx="12" cy="10" r="3"></circle></svg>
										<strong>{ fmt.Sprint(location.CurrentCount) }</strong>
									</span>
								}
							</div>
						</div>
					}
				}
			</div>
		</div>
		<div class="overflow-y-auto w-full">
			@ActivityTeamsTable(instance.Locations, instance.Teams)
		</div>
	</div>
	@scheduleModal(instance)
	@announcementModal()
	@teamModal()
	<script>

(function () {
  let map; // Store the map instance globally within the IIFE
  let markerArray = []; // Store the markers array globally within the IIFE

  function initializeMap() {
    const coords = [170.5111643, -45.8650509];
    const zoom = 17;

    // Clear any existing markers
    markerArray.forEach(marker => marker.remove());
    markerArray = [];

    // Destroy existing map instance if it exists
    if (map) {
      map.remove();
      map = null; // Explicitly set to null to clear reference
    }

    // Set the Mapbox access token
    mapboxgl.accessToken = document.getElementById('mapbox_key').dataset.key;

    // Determine the style based on color scheme
    const style = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'mapbox://styles/nathanhollows/cl9w3nxff002m14sy9fco4vnr'
      : 'mapbox://styles/nathanhollows/clszboe2y005i01oid8ca37jm';

    // Create the map
    map = new mapboxgl.Map({
      container: 'map-activity',
      style: style,
      center: coords,
      zoom: zoom,
	  cooperativeGestures: true,
    });

    // Find and loop through .location-name elements to create markers
    document.querySelectorAll('.location-name').forEach(function(location) {
      const marker = new mapboxgl.Marker()
        .setLngLat([location.dataset.lng, location.dataset.lat]);
      markerArray.push(marker);
    });

    // Sort markers by latitude
    markerArray.sort(function(a, b) {
      // If northern hemisphere, sort by descending latitude
      return a.getLngLat().lat < 0
        ? b.getLngLat().lat - a.getLngLat().lat
        : a.getLngLat().lat - b.getLngLat().lat;
    });

    // Add markers to the map
    markerArray.forEach(marker => marker.addTo(map));

    // Fit the map to the bounds of the markers
    const bounds = new mapboxgl.LngLatBounds();
    markerArray.forEach(marker => {
      bounds.extend(marker.getLngLat());
    });

	// Disable animation easing for smoother fitBounds
	map.fitBounds(bounds, { padding: 50, duration: 0 });
  }

  // Initialize the map on page load
  initializeMap();

})();
</script>
}

templ teamModal() {
	<dialog id="team_modal" class="modal modal-bottom sm:modal-middle">
		<div class="modal-box">
			<!-- Contents will be replaced by the fetched content -->
		</div>
	</dialog>
	<script>
	document.getElementById("team_modal").addEventListener('htmx:afterSwap', (evt) => {
	  // Open the modal once the content is loaded and swapped
	  document.getElementById("team_modal").showModal();
	});
	</script>
}

templ ActivityTeamsTable(locations []internalModels.Location, teams []internalModels.Team) {
	<table
		id="team-activity"
		class="table table-sm w-full mt-5 md:mt-0 h-auto self-start"
		hx-get="/admin/activity/teams"
		hx-target="#team-activity"
		hx-indicator=".loading"
		hx-swap="outerHTML"
		hx-trigger="every 30s"
	>
		<thead>
			<tr class="text-center">
				<th
					scope="col"
					class="text-start"
				>
					Team Code
				</th>
				for i := range locations {
					<th scope="col">{ fmt.Sprint(i + 1) }</th>
				}
			</tr>
		</thead>
		<tbody>
			for _, team := range teamLocationMatrix(locations, teams) {
				<tr class="hover">
					for i, location := range team {
						if i == 0 {
							<th scope="row">
								<button
									class="btn btn-xs btn-ghost"
									hx-get={ fmt.Sprintf("/admin/activity/team/%s", location) }
									hx-target="#team_modal .modal-box"
									hx-trigger="click"
									hx-indicator=".loading"
									hx-swap="innerHTML"
								>
									{ location }
									<span class="loading loading-spinner loading-lg" style="display:none;"></span>
								</button>
							</th>
						} else {
							<td class="text-center">{ location }</td>
						}
					}
				</tr>
			}
			if len(teamLocationMatrix(locations, teams)) == 0 {
				<tr>
					<th
						scope="row"
						colspan="100%"
						class="text-center"
					>
						No <a href="/admin/teams" hx-boost="true" class="link" hx-target="body">teams</a> to show yet üò¢
					</th>
				</tr>
			}
		</tbody>
	</table>
}

// teamLocationMatrix returns a matrix of team locations [teamCode][locatinStatus]
// ‚óè for visiting, ‚úî for visited, blank for not visited
func teamLocationMatrix(locations []internalModels.Location, teams []internalModels.Team) [][]string {
	matrix := make([][]string, len(teams))
	for i := range matrix {
		matrix[i] = make([]string, len(locations)+1)
	}
	// Sort teams by code
	teams = func(teams []internalModels.Team) []internalModels.Team {
		sort.Slice(teams, func(i, j int) bool {
			return teams[i].Code < teams[j].Code
		})
		return teams
	}(teams)
	for i, team := range teams {
		if !team.HasStarted {
			continue
		}
		matrix[i][0] = team.Code
		for j, location := range locations {
			if team.MustCheckOut == location.ID {
				matrix[i][j+1] = "‚óè"
				continue
			}
			for _, visit := range team.CheckIns {
				if visit.LocationID == location.ID {
					matrix[i][j+1] = "‚úî"
					break
				}
			}
		}
	}
	// Filter out teams that have not started
	matrix = func(matrix [][]string) [][]string {
		var newMatrix [][]string
		for _, team := range matrix {
			if team[0] != "" {
				newMatrix = append(newMatrix, team)
			}
		}
		return newMatrix
	}(matrix)
	return matrix
}

templ GameScheduleStatus(instance internalModels.Instance, messages ...flash.Message) {
	for _, msg := range messages {
		@Toast(msg)
	}
	<div id="schedule-status" class="flex flex-row gap-3">
		switch instance.GetStatus() {
			case internalModels.Active:
				<a
					hx-get="/admin/schedule/stop"
					hx-target="#schedule-status"
					class="btn btn-outline btn-error flex join-item tooltip"
					data-tip="Stop the game"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-octagon-x w-5 h-5"><path d="m15 9-6 6"></path><path d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"></path><path d="m9 9 6 6"></path></svg>
					Stop
				</a>
				@scheduleButton(instance.EndTime.After(instance.StartTime.Time), instance.EndTime)
			case internalModels.Scheduled:
				<a
					hx-get="/admin/schedule/start"
					hx-target="#schedule-status"
					class="btn btn-outline btn-success flex join-item tooltip"
					data-tip="Start the game early"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-play w-5 h-5"><polygon points="6 3 20 12 6 21 6 3"></polygon></svg>
					Start now
				</a>
				@scheduleButton(true, instance.StartTime)
			case internalModels.Closed:
				<a hx-get="/admin/schedule/start" hx-target="#schedule-status" class="btn btn-outline btn-success flex join-item tooltip" data-tip="Start the game">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-play w-5 h-5"><polygon points="6 3 20 12 6 21 6 3"></polygon></svg>
					Start
				</a>
				@scheduleButton(false, instance.StartTime)
		}
	</div>
}

templ scheduleButton(scheduled bool, t schema.NullTime) {
	if !scheduled {
		<button class="btn btn-secondary flex join-item tooltip" onclick="schedule_modal.showModal()" data-tip="Sechedule">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar-clock w-5 h-5"><path d="M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5"></path><path d="M16 2v4"></path><path d="M8 2v4"></path><path d="M3 10h5"></path><path d="M17.5 17.5 16 16.3V14"></path><circle cx="16" cy="16" r="6"></circle></svg>
			Schedule
		</button>
	} else {
		<button
			id="start-time"
			data-start={ t.Format("02-Jan-2006 15:04:05") }
			class="btn btn-secondary flex join-item tooltip"
			onclick="schedule_modal.showModal()"
			data-tip="Sechedule"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar-clock w-5 h-5"><path d="M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5"></path><path d="M16 2v4"></path><path d="M8 2v4"></path><path d="M3 10h5"></path><path d="M17.5 17.5 16 16.3V14"></path><circle cx="16" cy="16" r="6"></circle></svg>
			<div id="days-container">
				<span class="countdown font-mono font-bold" id="days">
					<span></span>
				</span>
				d
			</div>
			<div id="hours-container">
				<span class="countdown font-mono font-bold" id="hours">
					<span></span>
				</span>
				h
			</div>
			<div>
				<span class="countdown font-mono font-bold" id="minutes">
					<span></span>
				</span>
				m
			</div>
			<div>
				<span class="countdown font-mono font-bold" id="seconds">
					<span></span>
				</span>
				s
			</div>
		</button>
		<style>
				for i := range 60 {
					{ fmt.Sprintf("[data-value=\"%d\"]", i) } {
						--value: { fmt.Sprint(i) };
				    }
				}
				</style>
		<script>
  // JavaScript for countdown
  function startCountdown(startTime) {
    function updateCountdown() {
      const now = new Date();
      const remainingTime = new Date(startTime) - now;

      if (remainingTime == 0) {
		window.location.reload();
        return;
      }

      const seconds = Math.floor((remainingTime / 1000) % 60);
      const minutes = Math.floor((remainingTime / 1000 / 60) % 60);
      const hours = Math.floor((remainingTime / 1000 / 60 / 60) % 24);
      const days = Math.floor(remainingTime / 1000 / 60 / 60 / 24);

      document.getElementById("seconds").style.setProperty('--value', seconds);
      document.getElementById("minutes").style.setProperty('--value', minutes);

      if (hours > 0) {
        document.getElementById("hours-container").style.display = "block";
        document.getElementById("hours").style.setProperty('--value', hours);
      } else {
        document.getElementById("hours-container").style.display = "none";
      }

      if (days > 0) {
        document.getElementById("days-container").style.display = "block";
        document.getElementById("days").style.setProperty('--value', days);
      } else {
        document.getElementById("days-container").style.display = "none";
      }
	  
    }

    updateCountdown();
    setInterval(updateCountdown, 1000);

  }

  if (document.getElementById('start-time') != null) {
		function UTCtoLocal(time) {
			const utc = new Date(`${time}`);
			const local = new Date(utc.getTime() - utc.getTimezoneOffset() * 60000);
			return local
		}
	  const startTimeElement = document.getElementById('start-time');
	  const startTime = startTimeElement.dataset.start;
	  startCountdown(UTCtoLocal(startTime));
  }
</script>
	}
}

templ TeamActivity(settings internalModels.InstanceSettings, team internalModels.Team, notifications []models.Notification, nextLocations []internalModels.Location) {
	<h3 class="text-lg font-bold">
		{ team.Code }
		if team.Name != "" {
			| { team.Name }
		}
	</h3>
	<!-- Next Locations -->
	<div class="w-full">
		<p class="py-3 font-bold">Next Locations</p>
		if len(nextLocations) > 0 {
			<div class="prose">
				<ul>
					for _, location := range nextLocations {
						<li>
							{ location.Marker.Name }
							if settings.NavigationMethod.String() == "Show Clues" {
								for _, clue := range location.Clues {
									<blockquote class="text-sm"><p>{ clue.Content }</p></blockquote>
								}
							}
						</li>
					}
				</ul>
			</div>
		} else {
			<p>No activity</p>
		}
	</div>
	<!-- Check-ins -->
	<div class="w-full">
		<p class="py-3 font-bold">Check-ins</p>
		if len(team.CheckIns) > 0 {
			<div class="prose">
				<ul>
					for _, scan := range team.CheckIns {
						<li>
							if scan.MustCheckOut {
								<span class="badge badge-info">Current</span>
							}
							<span>
								{ scan.Location.Name }
							</span>
							<span class="convert-time badge badge-sm badge-ghost" data-datetime={ fmt.Sprint(scan.CreatedAt.UTC()) }></span>
						</li>
					}
				</ul>
			</div>
		} else {
			<p>No activity</p>
		}
	</div>
	if len(notifications) > 0 {
		<p class="py-3 font-bold">Unread Notifications</p>
		for _, notification := range notifications {
			<div role="alert" class="alert mb-3" id="alert-{{ .ID }}">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-megaphone"><path d="m3 11 18-5v12L3 14v-3z"></path><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"></path></svg>
				<div>
					<div class="">{ notification.Content }</div>
				</div>
				<div class="badge">Sent { fmt.Sprint(notification.CreatedAt) }</div>
			</div>
		}
	}
	<p class="py-3 font-bold">Send an alert</p>
	<!-- Send an alert -->
	<label class="form-control w-full">
		<form hx-post="/admin/notify/team/" hx-swap="none">
			<input type="hidden" name="teamCode" value={ team.Code }/>
			<div class="join w-full">
				<input class="input input-bordered join-item w-full" name="content" placeholder="Message" autocomplete="off" autofocus="off" required/>
				<button type="submit" class="btn btn-primary join-item rounded-r-full" onclick="announcement_modal.close()">
					Send
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-horizontal w-5 h-5"><path d="m3 3 3 9-3 9 19-9Z"></path><path d="M6 12h16"></path></svg>
				</button>
			</div>
		</form>
		<div class="label">
			<span class="label-text-alt">This is a read-only message. Teams cannot reply.</span>
		</div>
	</label>
	<div class="modal-action">
		<form method="dialog">
			<!-- if there is a button in form, it will close the modal -->
			<button class="btn">Close</button>
		</form>
	</div>
}

templ scheduleModal(instance internalModels.Instance) {
	<dialog id="schedule_modal" class="modal modal-bottom sm:modal-middle">
		<form hx-post="/admin/schedule/" hx-swap="none" class="modal-box">
			<h3 class="text-lg font-bold">Schedule a Game</h3>
			<p class="py-3">
				Schedule a game to start and/or end at a specific time. 
			</p>
			<div class="divider py-5">
				<div class="form-control">
					<label class="label cursor-pointer flex gap-3">
						Scheduled Start
						if instance.StartTime.Time.IsZero() {
							<input type="checkbox" name="set_start" class="checkbox"/>
						} else {
							<input type="checkbox" name="set_start" class="checkbox" checked/>
						}
					</label>
				</div>
			</div>
			<div id="utc-start-time" class="join flex justify-center pb-5" data-start={ instance.StartTime.Format("2006-01-02 15:04") }>
				<input
					id="start_date"
					type="date"
					name="start_date"
					class="input input-bordered join-item"
				/>
				<input
					id="start_time"
					type="time"
					name="start_time"
					class="input input-bordered join-item"
				/>
			</div>
			<div class="divider py-5">
				<div class="form-control">
					<label class="label cursor-pointer flex gap-3">
						Scheduled End
						if !instance.EndTime.IsZero() && instance.EndTime.After(instance.StartTime.Time) {
							<input type="checkbox" name="set_end" class="checkbox" checked/>
						} else {
							<input type="checkbox" name="set_end" class="checkbox"/>
						}
					</label>
				</div>
			</div>
			<div id="utc-end-time" class="join flex justify-center" data-end={ instance.EndTime.Format("2006-01-02 15:04") }>
				<input
					id="end_date"
					type="date"
					name="end_date"
					class="input input-bordered join-item"
				/>
				<input
					id="end_time"
					type="time"
					name="end_time"
					class="input input-bordered join-item"
				/>
			</div>
			<!-- Hidden UTC Inputs -->
			<input type="hidden" name="utc_start_date"/>
			<input type="hidden" name="utc_start_time"/>
			<input type="hidden" name="utc_end_date"/>
			<input type="hidden" name="utc_end_time"/>
			<div class="modal-action">
				<button class="btn" onclick="event.preventDefault(); schedule_modal.close()">Nevermind</button>
				<button type="submit" onclick="schedule_modal.close()" class="btn btn-primary">Save</button>
			</div>
		</form>
	</dialog>
	<script>
		function localToUTC(date, time) {
			const utc = new Date(`${date}T${time}`);
			return {
				date: utc.toISOString().split('T')[0],
				time: utc.toISOString().split('T')[1].substring(0, 5)  // Get HH:MM format
			};
		}

		function UTCtoLocal(date, time) {
			const utc = new Date(`${date}T${time}Z`);
			const local = new Date(utc.getTime() - utc.getTimezoneOffset() * 60000);
			return {
				date: local.toISOString().split('T')[0],
				time: local.toISOString().split('T')[1].substring(0, 5)  // Get HH:MM format
			};
		}

		function populateDateTimeInputs() {
			const startDateInput = document.querySelector('input[name="start_date"]');
			const startTimeInput = document.querySelector('input[name="start_time"]');
			const endDateInput = document.querySelector('input[name="end_date"]');
			const endTimeInput = document.querySelector('input[name="end_time"]');

			const utcStart = document.getElementById('utc-start-time').dataset.start.split(' ');
			const utcEnd = document.getElementById('utc-end-time').dataset.end.split(' ');

			// Check the time is not empty: 0001-01-01 00:00
			if (utcStart[0] != '0001-01-01') {
				const localStart = UTCtoLocal(utcStart[0], utcStart[1]);
				startDateInput.value = localStart.date;
				startTimeInput.value = localStart.time;
			}

			if (utcEnd[0] != '0001-01-01') {
				const localEnd = UTCtoLocal(utcEnd[0], utcEnd[1]);
				endDateInput.value = localEnd.date;
				endTimeInput.value = localEnd.time;
			}
		}

        function handleDateTimeChange() {
            const startDateInput = document.querySelector('input[name="start_date"]');
            const startTimeInput = document.querySelector('input[name="start_time"]');
            const endDateInput = document.querySelector('input[name="end_date"]');
            const endTimeInput = document.querySelector('input[name="end_time"]');
            
            const utcStart = localToUTC(startDateInput.value, startTimeInput.value);
            const utcEnd = localToUTC(endDateInput.value, endTimeInput.value);
            
            document.querySelector('input[name="utc_start_date"]').value = utcStart.date;
            document.querySelector('input[name="utc_start_time"]').value = utcStart.time;
            document.querySelector('input[name="utc_end_date"]').value = utcEnd.date;
            document.querySelector('input[name="utc_end_time"]').value = utcEnd.time;
        }

		populateDateTimeInputs();
        document.addEventListener('DOMContentLoaded', function () {
            const inputs = document.querySelectorAll('input[type="date"], input[type="time"]');

            inputs.forEach(input => {
                input.addEventListener('change', handleDateTimeChange);
            });

			handleDateTimeChange();
        });
    </script>
}

templ announcementModal() {
	<dialog id="announcement_modal" class="modal modal-bottom sm:modal-middle">
		<form hx-post="/admin/notify/all" hx-swap="none" class="modal-box">
			<h3 class="text-lg font-bold">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-megaphone inline-block w-5 h-5 mb-1 mr-2"><path d="m3 11 18-5v12L3 14v-3z"></path><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"></path></svg>
				Announcement
			</h3>
			<p class="py-3">Send an announcement to all teams.</p>
			<textarea class="textarea textarea-bordered w-full" name="content" placeholder="Announcement"></textarea>
			<p class="text-sm py-3"><em>Note:</em> This will only be sent to teams that have already started playing.</p>
			<div class="modal-action">
				<button class="btn" onclick="event.preventDefault(); announcement_modal.close()">Nevermind</button>
				<button class="btn btn-primary" onclick="announcement_modal.close()">Send</button>
			</div>
		</form>
	</dialog>
}
