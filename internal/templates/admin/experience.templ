package templates

import "github.com/nathanhollows/Rapua/models"

templ Experience(settings models.InstanceSettings) {
	<form
		hx-post="/admin/experience"
		hx-trigger="submit"
		hx-swap="none"
	>
		<!-- Header -->
		<div class="flex flex-row justify-between items-center w-full p-5">
			<h1 class="text-2xl font-bold">Craft the experience</h1>
			<button class="btn btn-primary">Save</button>
		</div>
		<div class="flex w-full gap-5 lg:flex-row flex-col">
			<div class="grid h-fit px-5 flex-grow">
				<!--  settings -->
				<div class="divider divider-accent font-bold pb-5">Navigation</div>
				<!-- Navigation Method -->
				<div class="mb-5">
					<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row">
						<strong>Navigation Method</strong>
						<div class="dropdown dropdown-hover">
							<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
							</div>
							<div tabindex="0" class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow">
								for _, v := range models.GetNavigationMethods() {
									<div tabindex="0" class="card-body">
										<h2 class="card-title">{ v.String() }</h2>
										<p>{ v.Description() }</p>
									</div>
								}
							</div>
						</div>
					</div>
					<div class="">How should the players navigate the game?</div>
					<div class="form-control lg:w-full py-3">
						for i, v := range models.GetNavigationMethods() {
							<label class="label cursor-pointer">
								<span class="label-text">{ v.String() }</span>
								<input
									type="radio"
									name="navigationMethod"
									value={ v.String() }
									data-index={ intToString(i) }
									class="radio radio-primary"
									onchange="updatePreview()"
									if settings.NavigationMethod == v {
										checked
									}
								/>
							</label>
						}
					</div>
				</div>
				<!-- Navigation Mode -->
				<div class="my-5">
					<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row">
						<strong>Navigation Mode</strong>
						<div class="dropdown dropdown-hover">
							<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
							</div>
							<div
								tabindex="0"
								class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow"
							>
								for _, v := range models.GetNavigationModes() {
									<div tabindex="0" class="card-body">
										<h2 class="card-title">{ v.String() }</h2>
										<p>{ v.Description() }</p>
									</div>
								}
							</div>
						</div>
					</div>
					<span class="">
						How should the game decide which location(s) to show next?
					</span>
					<div class="form-control w-full py-3">
						for i, v := range models.GetNavigationModes() {
							<label class="label cursor-pointer">
								<span class="label-text">{ v.String() }</span>
								<input
									type="radio"
									name="navigationMode"
									value={ v.String() }
									data-index={ intToString(i) }
									class="radio radio-primary"
									if settings.NavigationMode == v {
										checked
									}
									onchange="updatePreview()"
								/>
							</label>
						}
					</div>
				</div>
				<!-- Maximum locations to show -->
				<div class="my-5">
					<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row">
						<strong>Maximum number of locations to show</strong>
						<div class="dropdown dropdown-hover">
							<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
							</div>
							<div
								tabindex="0"
								class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow-2xl"
							>
								<div tabindex="0" class="card-body">
									<h2 class="card-title">Maximum number of locations</h2>
									<p>This settings limits how many locations or clues are visible or valid for a team. This is useful for dispersing learners.</p>
									<p>This setting is only enabled for Random mode. All locations are visible in Free Roam mode, and only the next is visible for Ordered.</p>
								</div>
							</div>
						</div>
					</div>
					<label class="form-control w-full py-3">
						<div class="label">
							<span class="label-text">How many locations should the team be presented with?</span>
							<span class="label-text-alt text-error font-bold hidden">Disabled in <span id="mode-name"></span> mode</span>
						</div>
						<input
							type="number"
							name="maxLocations"
							min="0"
							step="1"
							placeholder="3"
							value={ intToString(settings.MaxNextLocations) }
							class="input input-bordered w-full"
							onkeyup="updatePreview()"
							id="maxLocations"
						/>
						<div class="label">
							<span class="label-text-alt">Set to 0 to show all</span>
						</div>
					</label>
				</div>
				<!-- End Maximum locations to show -->
				<!-- Show visiting count -->
				<div class="my-5">
					<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row">
						<strong>Show team count</strong>
						<div class="dropdown dropdown-hover">
							<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
							</div>
							<div
								tabindex="0"
								class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow-2xl"
							>
								<div tabindex="0" class="card-body">
									<h2 class="card-title text-center">Show visiting count</h2>
									<p>This setting allows you to show how many teams are visiting a location. This can be useful for collaborative activities or minimising congestion.</p>
								</div>
							</div>
						</div>
					</div>
					<div class="form-control w-full py-3">
						<p class="label-text-alt text-error font-bold invisible text-right" id="teamCountDisabledMessage">Disabled when Show Clues is selected</p>
						<label class="label cursor-pointer">
							<span class="label-text">Show the number of teams at each location?</span>
							<input
								type="checkbox"
								id="showTeamCount"
								name="showTeamCount"
								class="toggle toggle-primary"
								onchange="updatePreview()"
								if settings.ShowTeamCount {
									checked
								}
							/>
						</label>
					</div>
				</div>
				<!-- End Show visiting count -->
				<!-- Completion Method -->
				<div class="my-5">
					<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row">
						<strong>Default Completion Method</strong>
						<div class="dropdown dropdown-hover">
							<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
							</div>
							<div
								tabindex="0"
								class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow"
							>
								for _, v := range models.GetCompletionMethods() {
									<div tabindex="0" class="card-body">
										<h2 class="card-title">{ v.String() }</h2>
										<p>{ v.Description() }</p>
									</div>
								}
							</div>
						</div>
					</div>
					<div class="">How should players complete a location? This option sets the <em>default</em> mode for new locations.</div>
					<div class="form-control w-full py-3">
						for i, v := range models.GetCompletionMethods() {
							<label class="label cursor-pointer">
								<span class="label-text">{ v.String() }</span>
								<input
									type="radio"
									name="completionMethod"
									value={ v.String() }
									data-index={ intToString(i) }
									class="radio radio-primary"
									if settings.CompletionMethod == v {
										checked
									}
								/>
							</label>
						}
					</div>
				</div>
				<!-- End Completion Method -->
				<div class="divider divider-accent font-bold">Competition</div>
				<!-- Enable Points -->
				<div class="my-5">
					<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row">
						<strong>Enable Points</strong>
						<div class="dropdown dropdown-hover">
							<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
							</div>
							<div
								tabindex="0"
								class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow-2xl"
							>
								<div tabindex="0" class="card-body">
									<h2 class="card-title text-center">Enable Points</h2>
									<p>This settings allows teams to accrue points for checking in. This setting makes the experience more gamelike but may impact intrinsic motivation.</p>
								</div>
							</div>
						</div>
					</div>
					<div class="form-control w-full py-3">
						<label class="label cursor-pointer">
							<span class="label-text">Enable Points for this game?</span>
							<input
								type="checkbox"
								id="enablePoints"
								name="enablePoints"
								class="toggle toggle-primary"
								onchange="updatePreview()"
								if settings.EnablePoints {
									checked
								}
							/>
						</label>
					</div>
				</div>
				<!-- End Enable Points -->
				<!-- Bonus Points -->
				<div class="my-5">
					<div class="flex justify-between">
						<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row">
							<strong>Bonus Points for First to Check-In</strong>
							<div class="dropdown dropdown-hover">
								<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 lucide lucide-info"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
								</div>
								<div
									tabindex="0"
									class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-72 shadow-2xl"
								>
									<div tabindex="0" class="card-body">
										<h2 class="card-title text-center">Early Check-In Bonus</h2>
										<p>
											This setting awards bonus points to the first, second, and third team to check-in to each location. 
										</p>
										<div class="prose text-sm">
											<ul>
												<li>First receives 2x the base points.</li>
												<li>Second receives 1.5x the base points.</li>
												<li>Third receives 1.2x the base points.</li>
											</ul>
										</div>
										<p>Base points are awarded for each check-in and are set for each location.</p>
										<p>This setting encourages players to race and disperse.</p>
									</div>
								</div>
							</div>
						</div>
						<span class="label-text-alt text-error font-bold invisible text-right" id="bonusPointsDisabled">Disabled</span>
					</div>
					<label class="form-control w-full">
						<div class="label">
							<span class="label-text">Enable bonus points for early check-ins?</span>
							<input
								type="checkbox"
								id="enableBonusPoints"
								name="enableBonusPoints"
								class="toggle toggle-primary"
								onchange="updatePreview()"
								if settings.EnableBonusPoints {
									checked
								}
							/>
						</div>
					</label>
					<label class="form-control w-full py-3">
						<label class="label cursor-pointer"></label>
					</label>
				</div>
				<!-- End Bonus Points -->
				<div class="text-center">
					<button class="btn btn-primary w-1/2">Save</button>
				</div>
			</div>
			<!-- Preview Divider -->
			<div class="divider lg:divider-horizontal py-5">
				<div class="divider-text">Preview</div>
			</div>
			<!-- Preview -->
			<div class="flex h-min-content flex-col lg:px-5 px-3">
				<div class="mockup-phone h-min sticky top-8">
					<div class="camera"></div>
					<div class="display">
						<div class="artboard artboard-demo phone lg:phone-2" data-theme="cupcake">
							<!-- Demo -->
							<div class="sm:mx-auto sm:w-full sm:max-w-sm block overflow-y-scroll p-5 py-12">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-compass w-16 h-16 mx-auto"><path d="m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z"></path><circle cx="12" cy="12" r="10"></circle></svg>
								<h2 class="mt-5 mb-3 text-center text-2xl font-bold leading-9 tracking-tight">
									Next location
								</h2>
								<div class="prose">
									<p class="text-center pb-5">
										You may choose any of the following locations. Use the map below to help
										find where you want to go.
									</p>
									<div id="locationList" class="text-center"></div>
									<div id="navigationView" class="text-center mt-5"></div>
								</div>
							</div>
							<!-- /Demo -->
						</div>
					</div>
				</div>
			</div>
		</div>
	</form>
	<script>
var locations = [
  { name: "Eiffel Tower", clue: "Find the tallest structure in Paris." },
  { name: "Statue of Liberty", clue: "Look for the statue that welcomes visitors to New York Harbor." },
  { name: "Colosseum", clue: "Find the ancient amphitheater in Rome." },
  { name: "Great Wall of China", clue: "Search for the longest wall in the world." },
  { name: "Taj Mahal", clue: "Locate the white marble mausoleum in India." }
];

var teams = Array.from({ length: locations.length }, () => Math.floor(Math.random() * 5) + 1);

function getCheckedData(name) {
  const checkedElement = document.querySelector(`input[name="${name}"]:checked`);
  return checkedElement ? checkedElement.getAttribute("data-index") : null;
}

function updatePreview() {
  const navigationMode = getCheckedData("navigationMode");
  const navigationMethod = getCheckedData("navigationMethod");
  let maxLocations = parseInt(document.getElementById('maxLocations').value) || 0;
  const completionMethod = getCheckedData("completionMethod");

  updateMaxLocationsVisibility(navigationMode);
  updateTeamCountVisibility(navigationMethod);

  let locationListHtml = "";
  let navigationViewHtml = "";

  if (navigationMode === "0") { // Random mode
    shuffleArray(locations);
  } else if (navigationMode === "2") { // Ordered mode
    maxLocations = 1;
  }

  const limit = (navigationMode === "1") ? locations.length : (maxLocations === 0 ? locations.length : Math.min(maxLocations, locations.length));

  switch (navigationMethod) {
    case "0": // Show Map
      navigationViewHtml = '<div class="h-64 w-full bg-neutral-content rounded-lg shadow-lg flex justify-center items-center text-neutral"><em>Map</em></div>';
      break;
    case "1": // Show Map and Names
      locationListHtml = generateLocationList(limit, completionMethod);
      navigationViewHtml = '<div class="h-64 w-full bg-neutral-content rounded-lg shadow-lg flex justify-center items-center text-neutral"><em>Map</em></div>';
      break;
    case "2": // Show Location Names Only
      locationListHtml = generateLocationList(limit, completionMethod);
      break;
    case "3": // Show Clues
      navigationViewHtml = generateClueList(limit);
      break;
  }

  if (navigationMode === "1") { // Free Roam mode
    switch (navigationMethod) {
      case "0": // Show Map
        navigationViewHtml = '<div class="h-64 w-full bg-neutral-content rounded-lg shadow-lg flex justify-center items-center text-neutral"><em>Map</em></div>';
        break;
      case "1": // Show Map and Names
        locationListHtml = generateLocationList(locations.length, completionMethod);
        navigationViewHtml = '<div class="h-64 w-full bg-neutral-content rounded-lg shadow-lg flex justify-center items-center text-neutral"><em>Map</em></div>';
        break;
      case "2": // Show Location Names Only
        locationListHtml = generateLocationList(locations.length, completionMethod);
        break;
      case "3": // Show Clues
        navigationViewHtml = generateClueList(locations.length);
        break;
    }
  }

  const enablePointsElement = document.getElementById('enablePoints');
  const enableBonusPointsElement = document.getElementById('enableBonusPoints');
  const bonusPointsDisabledMessage = document.getElementById('bonusPointsDisabled');

  if (!enablePointsElement.checked) {
    enableBonusPointsElement.disabled = true;
    bonusPointsDisabledMessage.classList.remove('invisible');
  } else {
    enableBonusPointsElement.disabled = false;
    bonusPointsDisabledMessage.classList.add('invisible');
  }

  document.getElementById('locationList').innerHTML = locationListHtml;
  document.getElementById('navigationView').innerHTML = navigationViewHtml;
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function generateLocationList(limit, completionMethod) {
  let html = "";
  for (let i = 0; i < limit; i++) {
    html += `<p class="text-center"><em>${locations[i].name}</em>`;
    if (document.getElementById('showTeamCount').checked) {
      html += `<br><span class="badge badge-ghost">${teams[i]} Teams Visiting</span>`;
    }
    html += `</p>`;
  }
  return html;
}

function generateClueList(limit) {
  let html = "";
  for (let i = 0; i < limit; i++) {
    html += `<blockquote class="text-center">${locations[i].clue}</blockquote>`;
  }
  return html;
}

function updateMaxLocationsVisibility(navigationMode) {
  const maxLocationsInput = document.getElementById('maxLocations');
  const modeNameSpan = document.getElementById('mode-name');
  const disabledMessage = document.querySelector('.label-text-alt.text-error');

  if (navigationMode === "0") { // Random mode
    maxLocationsInput.disabled = false;
    disabledMessage.classList.add('hidden');
  } else {
    maxLocationsInput.disabled = true;
    modeNameSpan.textContent = navigationMode === "1" ? "Free Roam" : "Ordered";
    disabledMessage.classList.remove('hidden');
  }
}

function updateTeamCountVisibility(navigationMethod) {
  const showTeamCountInput = document.getElementById('showTeamCount');
  const teamCountDisabledMessage = document.getElementById('teamCountDisabledMessage');

  if (navigationMethod === "3") { // Show Clues
    showTeamCountInput.disabled = true;
    teamCountDisabledMessage.classList.remove('invisible');
  } else {
    showTeamCountInput.disabled = false;
    teamCountDisabledMessage.classList.add('invisible');
  }
}

// Initial update
updatePreview();
</script>
}
