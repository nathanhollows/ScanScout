package templates

import (
	"fmt"
	"github.com/nathanhollows/Rapua/blocks"
	"github.com/nathanhollows/Rapua/internal/models"
	bTemplates "github.com/nathanhollows/Rapua/internal/templates/blocks"
)

templ LocationsIndex(settings models.InstanceSettings, locations []models.Location) {
	<!-- Header -->
	<div class="flex flex-col gap-3 md:flex-row justify-between items-center w-full p-5">
		<h1 class="text-2xl font-bold">
			Locations 
			<span class="badge badge-ghost">{ fmt.Sprint(len(locations)) }</span>
			<span class="htmx-indicator loading loading-dots loading-md text-info">Updating</span>
		</h1>
		<span class="flex md:flex-row flex-wrap justify-center gap-5">
			if len(locations) > 1 {
				<div class="join">
					<a
						href="/admin/locations/qr-codes.zip"
						class="btn btn-base btn-outline join-item mb-3 md:mb-0"
					>
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-image-down"><path d="M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"></path> <path d="m14 19 3 3v-5.5"></path> <path d="m17 22 3-3"></path> <circle cx="9" cy="9" r="2"></circle></svg>
						QR codes
					</a>
					<a
						class="btn btn-base btn-outline join-item"
						href="/admin/locations/posters.pdf"
					>
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-down"><path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"></path> <path d="M14 2v4a2 2 0 0 0 2 2h4"></path> <path d="M12 18v-6"></path> <path d="m9 15 3 3 3-3"></path></svg>
						Posters
					</a>
				</div>
			}
			<a
				href="/admin/locations/new"
				hx-boost="true"
				class="btn btn-secondary"
			>
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin-plus w-5 h-5"><path d="M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"></path><circle cx="12" cy="10" r="3"></circle><path d="M16 18h6"></path><path d="M19 15v6"></path></svg>
				Add Location
			</a>
		</span>
	</div>
	<!-- Locations list -->
	<div class="px-5">
		<form
			if settings.NavigationMode == models.OrderedNav {
				class="join join-vertical w-full shadow sortable"
			} else {
				class="join join-vertical w-full shadow"
			}
			hx-post="/admin/locations/reorder"
			hx-trigger="end"
			hx-swap="none"
			hx-indicator=".htmx-indicator"
		>
			for _, location := range locations {
				<div
					class="flex flex-row justify-between items-center gap-3 bg-base-200 hover:bg-base-300 rounded-lg p-4 join-item"
					data-order={ fmt.Sprint(location.Order) }
				>
					<div class="flex flex-row items-center gap-3 grow">
						<!-- Drag handle -->
						if settings.NavigationMode == models.OrderedNav {
							<div
								class="tooltip tooltip-right flex gap-3 cursor-move"
								data-tip="Drag to reorder"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-grip-vertical"><circle cx="9" cy="12" r="1"></circle><circle cx="9" cy="5" r="1"></circle><circle cx="9" cy="19" r="1"></circle><circle cx="15" cy="12" r="1"></circle><circle cx="15" cy="5" r="1"></circle><circle cx="15" cy="19" r="1"></circle></svg>
							</div>
							<input type="hidden" name="location" value={ location.MarkerID }/>
						}
						<!-- Marker icon -->
						if location.Marker.Lat != 0 {
							<span
								class="tooltip cursor-help"
								data-tip="Has coordinates"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path> <circle cx="12" cy="10" r="3"></circle> </svg>
							</span>
						} else {
							<span
								class="tooltip cursor-help"
								data-tip="No coordinates set"
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin-off tooltip" data-tip="Location has no coordinates set"><path d="M5.43 5.43A8.06 8.06 0 0 0 4 10c0 6 8 12 8 12a29.94 29.94 0 0 0 5-5"></path> <path d="M19.18 13.52A8.66 8.66 0 0 0 20 10a8 8 0 0 0-8-8 7.88 7.88 0 0 0-3.52.82"></path> <path d="M9.13 9.13A2.78 2.78 0 0 0 9 10a3 3 0 0 0 3 3 2.78 2.78 0 0 0 .87-.13"></path> <path d="M14.9 9.25a3 3 0 0 0-2.15-2.16"></path> <line x1="2" x2="22" y1="2" y2="22"></line> </svg>
							</span>
						}
						<!-- Clue indicator -->
						if settings.NavigationMethod == models.ShowClues {
							if len(location.Clues) == 0 {
								<span class="tooltip text-neutral cursor-help" data-tip="No clues">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-x"><path d="m13.5 8.5-5 5"></path><path d="m8.5 8.5 5 5"></path><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>
								</span>
							} else {
								<span class="tooltip cursor-help" data-tip="Has clues">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>
								</span>
							}
						}
						<!-- Location code -->
						<div
							class="badge badge-ghost basis-16 tooltip"
							data-tip="Unique location code"
						>
							<code>
								{ location.Marker.Code }
							</code>
						</div>
						<!-- Location name -->
						<a
							href={ templ.SafeURL(fmt.Sprint("/admin/locations/", location.MarkerID)) }
							class="link flex-grow"
							hx-boost="true"
							hx-swap="outerHTML"
						>
							{ location.Marker.Name }
						</a>
						if settings.EnablePoints {
							<span class="badge">
								{ fmt.Sprint(location.Points) } pts
							</span>
						}
					</div>
				</div>
			}
		</form>
	</div>
	<script>
htmx.onLoad(function(content) {
    var sortables = content.querySelectorAll(".sortable");
    for (var i = 0; i < sortables.length; i++) {
      var sortable = sortables[i];
      var sortableInstance = new Sortable(sortable, {
          animation: 150,
          ghostClass: 'blue-background-class',
          handle: ".cursor-move",

          // Make the `.htmx-indicator` unsortable
          filter: ".htmx-indicator",
          onMove: function (evt) {
            return evt.related.className.indexOf('htmx-indicator') === -1;
          },

          // Disable sorting on the `end` event
          onEnd: function (evt) {
            this.option("disabled", true);
          }
      });

      // Re-enable sorting on the `htmx:afterSwap` event
      sortable.addEventListener("htmx:afterSwap", function() {
        sortableInstance.option("disabled", false);
      });
    }
})
</script>
}

templ AddLocation(settings models.InstanceSettings) {
	<form
		class="flex flex-col gap-5 w-full p-5 max-w-2xl mx-auto"
		method="post"
		hx-post="/admin/locations/new"
	>
		<!-- Header -->
		<div class="flex flex-col gap-3 md:flex-row justify-between items-center w-full">
			<h1 class="text-2xl font-bold">
				Add a location
			</h1>
			<button type="submit" class="btn btn-primary">Save</button>
		</div>
		<div class="flex flex-col md:flex-row gap-3">
			<label class="form-control w-full">
				<div class="label">
					<span class="label-text font-bold">Location name</span>
				</div>
				<input
					id="name"
					name="name"
					type="text"
					placeholder="Location name"
					class="input input-bordered w-full"
					autocomplete="off"
					required
				/>
			</label>
			if settings.EnablePoints {
				<label for="points" class="form-control w-full">
					<div class="label">
						<span class="label-text font-bold">Points</span>
					</div>
					<input
						type="number"
						id="points"
						name="points"
						class="input input-bordered w-full"
						value="10"
						placeholder="Enter points"
						required
					/>
				</label>
			}
		</div>
		<!-- Map -->
		<div class="form-control">
			<label class="">
				<span class="label-text font-bold p-2 mb-2">Map marker</span>
				<div id="geocoder" class="geocoder mt-2"></div>
			</label>
		</div>
		<div id="map" class="w-full h-96 rounded-lg shadow-lg"></div>
		<div class="form-control">
			<label class="label cursor-pointer font-bold">
				<span class="label-text">Physical location</span>
				<input
					type="checkbox"
					name="location"
					class="toggle toggle-primary"
				/>
			</label>
		</div>
		<input
			type="hidden"
			name="latitude"
		/>
		<input
			type="hidden"
			name="longitude"
		/>
	</form>
	@locationScript()
}

templ EditLocation(location models.Location, settings models.InstanceSettings, contentBlocks blocks.Blocks) {
	<form
		hx-post={ fmt.Sprint("/admin/locations/", location.MarkerID) }
		hx-trigger="submit"
		hx-swap="none"
	>
		<!-- Header -->
		<div class="flex flex-col sm:flex-row gap-3 justify-between items-center w-full p-5">
			<h1 class="text-2xl font-bold">Editing <em>{ location.Name }</em></h1>
			<div class="flex gap-3">
				<div class="dropdown">
					<div tabindex="0" role="button" class="btn btn-outline">
						Downloads
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down w-4 h-4"><path d="m6 9 6 6 6-6"></path></svg>
					</div>
					<ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow">
						<h2 class="menu-title">Pre-made</h2>
						<li>
							<ul>
								<li>
									<a
										href={ templ.SafeURL(fmt.Sprint("/admin/locations/poster/", location.MarkerID, ".pdf")) }
									>
										if settings.CompletionMethod == models.CheckInAndOut {
											Posters (PDF)
										} else {
											Poster (PDF)
										}
									</a>
								</li>
							</ul>
						</li>
						<h2 class="menu-title">Check-In</h2>
						<li>
							<ul>
								<li>
									<a
										href={ templ.SafeURL(fmt.Sprint("/admin/locations/qr/in/", location.MarkerID, ".png")) }
										download={ fmt.Sprint("Check In ", location.MarkerID, " ", location.Name, ".png") }
									>QR Code (PNG)</a>
								</li>
								<li>
									<a
										href={ templ.SafeURL(fmt.Sprint("/admin/locations/qr/in/", location.MarkerID, ".svg")) }
										download={ fmt.Sprint("Check In ", location.MarkerID, " ", location.Name, ".svg") }
									>QR Code (SVG)</a>
								</li>
							</ul>
						</li>
						if settings.CompletionMethod == models.CheckInAndOut {
							<h2 class="menu-title">Check-Out</h2>
							<li>
								<ul>
									<li>
										<a
											href={ templ.SafeURL(fmt.Sprint("/admin/locations/qr/out/", location.MarkerID, ".png")) }
											download={ fmt.Sprint("Check Out ", location.MarkerID, " ", location.Name, ".png") }
										>QR Code (PNG)</a>
									</li>
									<li>
										<a
											href={ templ.SafeURL(fmt.Sprint("/admin/locations/qr/out/", location.MarkerID, ".svg")) }
											download={ fmt.Sprint("Check Out ", location.MarkerID, " ", location.Name, ".svg") }
										>QR Code (SVG)</a>
									</li>
								</ul>
							</li>
						}
					</ul>
				</div>
				<button type="button" class="btn btn-error" onclick="confirm_delete_modal.showModal();">Delete</button>
				<button type="submit" class="btn btn-primary">Save</button>
			</div>
		</div>
		<div class="flex-grow mx-auto">
			<div class="flex flex-col md:flex-row p-5 pt-0 gap-5 lg:gap-20">
				<div class="flex flex-col flex-grow">
					<div class="flex flex-col sm:flex-row gap-5 mb-5">
						<!-- Location Title -->
						<label for="name" class="form-control w-full md:w-1/2">
							<div class="label">
								<span class="label-text font-bold">Location name</span>
							</div>
							<input
								type="text"
								id="name"
								name="name"
								class="input input-bordered w-full"
								value={ location.Marker.Name }
								placeholder="Location name"
							/>
						</label>
						if settings.EnablePoints {
							<!-- Location Points -->
							<label for="points" class="form-control w-full md:w-1/2">
								<div class="label">
									<span class="label-text font-bold">Points</span>
									if !settings.EnablePoints {
										<span class="label-text-alt">
											<span class="flex gap-1 badge badge-outline badge-sm tooltip cursor-help" data-tip="Points are currently disabled">
												<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info w-3 h-3"><circle cx="12" cy="12" r="10"></circle><path d="M12 16v-4"></path><path d="M12 8h.01"></path></svg>
												Disabled
											</span>
										</span>
									}
								</div>
								<input
									type="number"
									id="points"
									name="points"
									class="input input-bordered w-full"
									value={ fmt.Sprint(location.Points) }
									placeholder="Enter points"
								/>
							</label>
						} else {
							<input type="hidden" name="points" value={ fmt.Sprint(location.Points) }/>
						}
					</div>
					<!-- Clues -->
					if settings.NavigationMethod == models.ShowClues {
						<section class="mb-8">
							<div class="label flex justify-between">
								<div class="flex flex-row-reverse justify-end md:justify-start md:flex-row">
									<strong>Clues</strong>
									<div class="dropdown dropdown-hover">
										<div tabindex="0" role="button" class="btn btn-circle btn-ghost btn-xs text-info">
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-alert w-4 h-4 text-info"><circle cx="12" cy="12" r="10"></circle><line x1="12" x2="12" y1="8" y2="12"></line><line x1="12" x2="12.01" y1="16" y2="16"></line></svg>
										</div>
										<div
											tabindex="0"
											class="card compact dropdown-content bg-base-200 rounded-box z-[1] w-64 shadow"
										>
											<div tabindex="0" class="card-body">
												<h2 class="card-title">Clues</h2>
												<p class="text-wrap">Each team is shown one randomly selected clue.</p>
												<p class="text-wrap">If no clues are available then the player is told the name of the location as a freebie.</p>
												<p class="text-wrap">Clues may contain <a class="link" href="/admin/markdown" target="blank">Markdown</a> formatting.</p>
											</div>
										</div>
									</div>
								</div>
								<button class="add-clue-btn btn btn-sm btn-neutral my-2" type="button">
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-list-plus w-5 h-5"><path d="M11 12H3"></path><path d="M16 6H3"></path><path d="M16 18H3"></path><path d="M18 9v6"></path><path d="M21 12h-6"></path></svg>
									Add a clue
								</button>
							</div>
							<div id="clue-list" class="flex flex-col join join-vertical">
								if len(location.Clues) == 0 {
									<div class="alert">
										<span>
											There are no clues to show. Do you want to <a class="link add-clue-btn">add a clue</a>? 
										</span>
									</div>
								}
								for _, clue := range location.Clues {
									<label class="clue-line input input-bordered bg-transparent flex flex-row items-top gap-2 h-auto join-item" data-item-id={ clue.ID }>
										<input
											type="text"
											name="clues"
											class="w-full input hover:border-0 hover:outline-0 focus:border-0 focus:outline-0 border-0 outline-0 pr-8 pl-0 bg-transparent overflow-ellipsis"
											value={ clue.Content }
											placeholder="Add a clue"
											autoComplete="off"
										/>
										<input type="hidden" name="clue-ids" value={ clue.ID }/>
										<button
											type="button"
											class="btn btn-xs btn-circle hover:btn-error tooltip tooltip-left flex mt-3"
											data-tip="Delete"
											onclick="this.closest('.clue-line').remove()"
											tabindex="-1"
										>
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 w-3 h-3"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
										</button>
									</label>
								}
							</div>
						</section>
					}
					<!-- Blocks -->
					<section>
						<div class="divider mt-5 mb-10">
							<div class="dropdown">
								<div class="block">
									<div tabindex="0" role="button" class="btn btn-sm btn-neutral w-32 flex flex-col">
										<svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus"><path d="M5 12h14"></path><path d="M12 5v14"></path></svg>
										Add a Block
									</div>
								</div>
								<div tabindex="0" class="dropdown-content card bg-base-200 border border-base-300 shadow-lg w-80 -ml-24 mt-3 z-50">
									<div class="card-body">
										<h2 class="card-title mb-3">Add a Block</h2>
										<div class="grid grid-cols-2 grid-flow-row gap-5">
											for _, block := range blocks.GetRegisteredBlocks() {
												<div class="indicator w-full">
													if   block.RequiresValidation() {
														<span
															class="indicator-item indicator-top indicator-center badge badge-outline border-base-content/30 bg-base-100"
														>
															Interactive
														</span>
													}
													<div
														class="btn btn-outline border-base-content/30 h-auto p-3 tooltip flex flex-col gap-1 items-center rounded-md w-full"
														data-tip={ block.GetDescription() }
														hx-post={ fmt.Sprint("/admin/locations/", location.ID, "/blocks/new/", block.GetType()) }
														hx-target="#blocks"
														hx-swap="beforeend"
													>
														@templ.Raw(block.GetIconSVG())
														{ block.GetName() }
													</div>
												</div>
											}
										</div>
									</div>
								</div>
							</div>
						</div>
						<div
							id="blocks"
							class="sortable"
							hx-post={ fmt.Sprint("/admin/locations/", location.ID, "/blocks/reorder") }
							hx-trigger="end"
						>
							for _, block := range contentBlocks {
								@bTemplates.RenderAdminBlock(settings, block)
							}
						</div>
					</section>
				</div>
				<!-- Sidebar -->
				<aside class="flex flex-col">
					<!-- Map -->
					<div id="map-container" class="relative w-full aspect-square md:w-[35vw] lg:w-96 rounded-lg shadow-lg mt-5">
						<div id="map" class="map w-full h-full rounded-lg"></div>
						<!-- Overlay Button and Backdrop -->
						<div id="map-lock-overlay" class="absolute inset-0 bg-base-300 bg-opacity-70 flex justify-center items-center opacity-0 hover:opacity-100 transition rounded-lg focus:opacity-100" tabindex="0">
							<button id="unlock-map-btn" class="btn btn-neutral" onclick="document.getElementById('map-lock-overlay').remove()">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-lock-keyhole w-5 h-5"><circle cx="12" cy="16" r="1"></circle><rect x="3" y="10" width="18" height="12" rx="2"></rect><path d="M7 10V7a5 5 0 0 1 10 0v3"></path></svg>
								Unlock to edit
							</button>
						</div>
					</div>
					<div class="form-control">
						<label class="label cursor-pointer">
							<span class="label-text">Save map location</span>
							<input
								type="checkbox"
								name="location"
								class="checkbox checkbox-sm"
								checked="checked"
							/>
						</label>
					</div>
					<!-- Hidden inputs for form handling -->
					<input type="hidden" name="code" value={ location.Marker.Code }/>
					<input type="hidden" name="latitude" value={ floatToString(location.Marker.Lat) }/>
					<input type="hidden" name="longitude" value={ floatToString(location.Marker.Lng) }/>
				</aside>
			</div>
		</div>
	</form>
	<dialog id="block_edit_modal" class="modal modal-bottom md:modal-middle"></dialog>
	<dialog id="confirm_delete_block" class="modal">
		<div class="modal-box prose outline outline-2 outline-offset-1 outline-error">
			<h3 class="text-lg font-bold">Delete this block?</h3>
			<p class="pt-4">You are about to delete this block. Are you sure?</p>
			<div class="modal-action">
				<button
					type="button"
					class="btn"
					onclick="confirm_delete_block.close()"
				>Nevermind</button>
				<button
					type="button"
					class="btn btn-error"
					onclick="confirm_delete_block.close()"
				>Delete</button>
			</div>
		</div>
	</dialog>
	<dialog id="confirm_delete_modal" class="modal">
		<div class="modal-box prose outline outline-2 outline-offset-1 outline-error">
			<h3 class="text-lg font-bold">Delete this location?</h3>
			<p class="pt-4">You are about to delete this location. Are you sure?</p>
			<div class="modal-action">
				<button
					type="button"
					class="btn"
					onclick="confirm_delete_modal.close()"
				>Nevermind</button>
				<button
					type="button"
					class="btn btn-error"
					hx-delete={ fmt.Sprint("/admin/locations/", location.MarkerID) }
					hx-trigger="click"
					onclick="confirm_delete_modal.close()"
				>Delete</button>
			</div>
		</div>
	</dialog>
	<script>
(() => {
  const addClueBtns = document.querySelectorAll(".add-clue-btn");
  const clueList = document.getElementById("clue-list");
  let alertRemoved = false; // Tracks if the alert has been removed

  addClueBtns.forEach((btn) => {
    btn.addEventListener("click", function () {
      // Remove the alert if present and not already removed
      if (!alertRemoved) {
        const existingAlert = clueList.querySelector(".alert");
        if (existingAlert) {
          existingAlert.remove();
        }
        alertRemoved = true; // Mark that alert has been removed
      }

      // Create the new clue input element based on the provided template
      addNewClueField();
    });
  });

  // Function to create and add a new clue field to the list
  const addNewClueField = (value = "") => {
    const newClueLine = document.createElement("label");
    newClueLine.classList.add(
      "clue-line", "input", "input-bordered", "bg-transparent", "flex", "flex-row", "items-top", "gap-2", "h-auto", "join-item"
    );

    newClueLine.innerHTML = `
      <input
        type="text"
        name="clues"
        class="w-full input hover:border-0 hover:outline-0 focus:border-0 focus:outline-0 border-0 outline-0 pr-8 pl-0 bg-transparent overflow-ellipsis"
        placeholder="Add a clue"
        autoComplete="off"
        value="${value}"
      />
      <button
        type="button"
        class="btn btn-xs btn-circle hover:btn-error tooltip tooltip-left flex mt-3"
        data-tip="Delete"
        onclick="this.closest('.clue-line').remove()"
        tabindex="-1"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2 w-3 h-3"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
      </button>
    `;

    // Add paste event to handle multi-line input
    const inputField = newClueLine.querySelector('input[type="text"]');
    inputField.addEventListener("paste", handlePasteEvent);

    // Append the new clue line to the clue list
    clueList.appendChild(newClueLine);
  };

  // Event handler for paste event
  const handlePasteEvent = (event) => {
    event.preventDefault(); // Prevent default paste behavior
    const pasteData = (event.clipboardData || window.clipboardData).getData("text");
    const lines = pasteData.split("\n").filter(line => line.trim() !== ""); // Split and remove empty lines

    // If only one line, just paste into the current field
    if (lines.length === 1) {
      event.target.value = lines[0];
    } else {
      // Otherwise, split lines into separate clue fields
      event.target.value = lines[0]; // Set the first line to the current input
      for (let i = 1; i < lines.length; i++) {
        addNewClueField(lines[i]); // Create a new clue input for each additional line
      }
    }
  };
})();
document.querySelector("#blocks").addEventListener("htmx:afterSettle", (event) => {
    // Select the last .block-edit-btn inside #blocks
    const blocks = document.querySelectorAll("#blocks .block-edit-btn");
    const lastBlockEditBtn = blocks[blocks.length - 1];

    // Check if the element exists
    if (lastBlockEditBtn) {
        // Trigger a click event on the last .block-edit-btn
        htmx.trigger(lastBlockEditBtn, "click");
    }
    
});
  function previewMD(e) {
	var checkBox = e.target;
	var id = e.target.dataset.block;
    var textarea = document.getElementById("md-" + id);
    var preview = document.getElementById("preview-md-" + id);

    if (checkBox.checked == true){
      textarea.classList.add("hidden");
      preview.classList.remove("hidden");
      preview.setAttribute("aria-busy", true)
      preview.innerHTML = "<span class='loading loading-ring loading-lg'></span>"

      var xhr = new XMLHttpRequest();
      xhr.open("POST", '/admin/markdown/preview', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(JSON.stringify({
        markdown: textarea.value
      }));

      xhr.onreadystatechange = (e) => {
        preview.innerHTML = xhr.response
      }
    } else {
      textarea.classList.remove("hidden");
      preview.classList.add("hidden");
      preview.innerHTML = null
    }
  }

function sortables() {
    var sortables = document.querySelectorAll(".sortable");
    for (var i = 0; i < sortables.length; i++) {
      var sortable = sortables[i];
      var sortableInstance = new Sortable(sortable, {
          animation: 150,
          handle: ".cursor-move",

          // Make the `.htmx-indicator` unsortable
          filter: ".htmx-indicator",
          onMove: function (evt) {
            return evt.related.className.indexOf('htmx-indicator') === -1;
          },

          // Disable sorting on the `end` event
          onEnd: function (evt) {
            this.option("disabled", true);
          }
      });

      // Re-enable sorting on the `htmx:afterSwap` event
      sortable.addEventListener("htmx:afterSwap", function() {
        sortableInstance.option("disabled", false);
      });
    }
}
sortables();
</script>
	@locationScript()
}

templ locationScript() {
	<script>
(function () {
  let map; // Store the map instance globally within the IIFE
  let marker; // Store the marker instance globally within the IIFE

  function initializeMap() {
    let coords = [170.5111643, -45.8650509];
    let zoom = 14;

    // Check if longitude and latitude fields are set
    if (document.querySelector('input[name="longitude"]').value != "" && document.querySelector('input[name="latitude"]').value != "") {
      coords = [
        parseFloat(document.querySelector('input[name="longitude"]').value),
        parseFloat(document.querySelector('input[name="latitude"]').value)
      ];
      zoom = 16;
    }

    // Destroy existing map instance if it exists
    if (map) {
      map.remove();
      map = null; // Explicitly set to null to clear reference
    }

    // Set the Mapbox access token
    mapboxgl.accessToken = document.getElementById('mapbox_key').dataset.key;

    // Determine map style based on color scheme
    const style = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'mapbox://styles/nathanhollows/cl9w3nxff002m14sy9fco4vnr'
      : 'mapbox://styles/nathanhollows/clszboe2y005i01oid8ca37jm';

    // Create the map
    map = new mapboxgl.Map({
      container: 'map',
      style: style,
      center: coords,
      zoom: zoom
    });

    // Create and place marker
    marker = new mapboxgl.Marker()
      .setLngLat(coords)
      .addTo(map);

    // Update marker position on map drag
    map.on('move', function() {
      const center = map.getCenter();
      marker.setLngLat(center);
      document.querySelector('input[name="latitude"]').value = center.lat;
      document.querySelector('input[name="longitude"]').value = center.lng;
      document.querySelector('input[name="location"]').checked = true;
    });

    // Update marker position on map drag
    map.on('drag', function() {
      const center = map.getCenter();
      marker.setLngLat(center);
      document.querySelector('input[name="latitude"]').value = center.lat;
      document.querySelector('input[name="longitude"]').value = center.lng;
      document.querySelector('input[name="location"]').checked = true;
    });

    // Update marker position on map zoom
    map.on('zoom', function() {
      const center = map.getCenter();
      marker.setLngLat(center);
    });


		var geocoderEl = document.getElementById('geocoder');
		if (geocoderEl) {
			var geocoder = new MapboxGeocoder({
				accessToken: mapboxgl.accessToken,
				mapboxgl: mapboxgl,
				marker: false,
				placeholder: 'Search for an address or use the map',
			});
			geocoderEl.appendChild(geocoder.onAdd(map));
		}

    // Add event listener for location saving switch
    document.querySelector('input[name="location"]').addEventListener('change', function(e) {
      if (e.target.checked) {
        const center = map.getCenter();
        marker.setLngLat(center);
        document.querySelector('input[name="latitude"]').value = center.lat;
        document.querySelector('input[name="longitude"]').value = center.lng;
      } else {
        document.querySelector('input[name="latitude"]').value = "";
        document.querySelector('input[name="longitude"]').value = "";
      }
    });
  }

  // Delete block confirmation dialog
  function confirmDeleteBlock(event) {
	modal = document.getElementById("confirm_delete_block");
	url = "/admin/locations/" + event.target.dataset.location + "/blocks/" + event.target.dataset.block + "/delete";
	btn = modal.querySelector("button.btn-error")
	btn.setAttribute("hx-delete", url);
	btn.setAttribute("hx-swap", "outerHTML");
	btn.setAttribute("hx-target", "#" + event.target.closest(".collapse").id);
	modal.showModal();
	htmx.process(modal);
  }

  for (const element of document.querySelectorAll('.block-delete')) {
	element.addEventListener('click', confirmDeleteBlock);
  }

  // Add listener to #blocks for new blocks
  if (document.getElementById("blocks")) {
  document.getElementById("blocks").addEventListener("htmx:afterSwap", function(event) {
	  for (const element of document.querySelectorAll('.block-delete')) {
		element.addEventListener('click', confirmDeleteBlock);
	  }
  });
  }

  initializeMap();

})();
</script>
}
